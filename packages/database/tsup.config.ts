import { defineConfig } from 'tsup';

export default defineConfig({
  // Entry points - main index.ts only (seed.ts is excluded intentionally)
  entry: ['src/index.ts'],
  
  // Output formats - ESM and CJS for dual compatibility
  format: ['esm', 'cjs'],
  
  // Output directory
  outDir: 'dist',
  
  // Generate TypeScript declarations
  dts: true,
  
  // Clean output directory before build
  clean: true,
  
  // Split into separate chunks for better tree-shaking
  splitting: true,
  
  // Generate source maps for debugging
  sourcemap: true,
  
  // Target ES2020 to match TypeScript config
  target: 'es2020',
  
  // Keep external dependencies external (not bundled)
  external: [
    // Drizzle ORM dependencies
    'drizzle-orm',
    'drizzle-kit',
    
    // Database drivers
    '@neondatabase/serverless',
    'ws',
    
    // Node.js built-ins
    'fs',
    'path',
    'url',
    'crypto',
    
    // Environment and utilities
    'dotenv',
    'uuidv7',
    
    // Workspace dependencies
    '@repo/shared'
  ],
  
  // Bundle for better compatibility
  bundle: true,
  
  // esbuild options for better compatibility
  esbuildOptions: (options) => {
    // Preserve JSX and imports
    options.jsx = 'preserve';
    options.keepNames = true;
    
    // Ensure proper module resolution
    options.platform = 'node';
    options.packages = 'external';
  },
  
  // Skip type checking during build (faster builds)
  skipNodeModulesBundle: true,
  
  // Keep Node.js shims for better compatibility
  shims: true,
  
  // Custom banner for generated files
  banner: {
    js: '// Generated by tsup from @repo/database package'
  },
  
  // Watch mode configuration for development
  watch: process.env.NODE_ENV === 'development',
  
  // Define environment for conditional exports
  define: {
    'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV || 'production')
  },
  
  // Minification only in production
  minify: process.env.NODE_ENV === 'production',
  
  // Tree shaking for smaller bundles
  treeshake: true
});